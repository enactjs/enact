@import './variables.less';
@import './mixins.less';

//
// Mixin classes for creating the moontone text classes
//

// Text base provides weight color
// Accepts 0 or 1 argument
.moon-text-base(@font-size: @moon-body-font-size) {
	.moon-font({
		font-weight: @moon-non-latin-font-weight;
		font-size: @moon-non-latin-sub-header-font-size;
	});
	font-weight: bold;
	font-size: @font-size;
}

//
// Moonstone Font Applicator
//
// When only rules are provided.
.moon-font(@nlrules) when (isruleset(@nlrules)) {
	.moon-font(@moon-font-family, @moon-non-latin-font-family, @nlrules);
}
// When 0, 1, or 2 strings (font family names) are provided.
.moon-font(@family: @moon-font-family; @nlfamily: @moon-non-latin-font-family) when (isstring(@family)) and (isstring(@nlfamily)) {
	.moon-font(@family; @nlfamily; {})
}
// When exactly 3 args are provided. Types are assumed because they went through the trouble to provide all 3 args.
.moon-font(@family; @nlfamily; @nlrules) {
	font-family: @family;

	.moon-locale-non-latin({
		font-family: @nlfamily;
		@nlrules();
	});
}

// Generic Non-Latin Font Rule generator
.moon-locale-non-latin(@nlrules) when (isruleset(@nlrules)) {
	:global(.enact-locale-non-latin) & {
		@nlrules();
	}
}

//
// Custom Text Size Mixins
//
// 1 arg: Shorthand for just setting the font size in custom-text mode
.moon-custom-text-size(@latin-size) {
	.moon-custom-text({
		font-size: @latin-size;
	});
}
// 2 args: Shorthand for just setting the font size of both latin and non-latin in custom-text mode
.moon-custom-text-size(@latin-size; @non-latin-size) {
	.moon-custom-text(
		{
			font-size: @latin-size;
		};
		{
			font-size: @non-latin-size;
		}
	);
}

// 1 arg: Generic rule applicator, accepts an entire rule-set to add for large text mode
.moon-custom-text(@lrules) when (isruleset(@lrules)) {
	:global(.enact-text-large) & {
		@lrules();
	}
}
// 2 args: Generic rule applicator, accepts 2 entire rule-sets to add both latin and non-latin for large text mode
.moon-custom-text(@lrules; @nlrules) when (isruleset(@lrules)) and (isruleset(@nlrules)) {
	:global(.enact-text-large) & {
		@lrules();
	}
	:global(.enact-text-large.enact-locale-non-latin) & {
		@nlrules();
	}
}

//
// Text definitions
//

.moon-superscript() {
	font-size: @moon-superscript-text-size;
	vertical-align: top;
	margin: 0 0 0 3px;
	padding: 0;

	.moon-locale-non-latin({
		font-family: @moon-non-latin-font-family-light;
		font-weight: @moon-non-latin-font-weight-light;
		font-size: @moon-non-latin-superscript-text-size;
	});
}

.moon-pre-text() {
	font-size: @moon-pre-text-size;
	vertical-align: top;
	height:  @moon-large-text-size;
	line-height: @moon-pre-text-size;
	margin: 12px 3px 9px 0;
	padding: 0px;

	.moon-locale-non-latin({
		font-family: @moon-non-latin-font-family-light;
		font-weight: @moon-non-latin-font-weight-light;
		font-size: @moon-non-latin-pre-text-size;
	});
}

.moon-large-text() {
	font-size: @moon-large-text-size;
	vertical-align: top;
	height: @moon-large-text-size;
	margin: 0;
	padding: 0;

	.moon-locale-non-latin({
		font-size: @moon-non-latin-large-text-size;
	});
}

.moon-header-text() {
	.moon-font(@moon-header-font-family, @moon-non-latin-font-family, {
		font-size: @moon-non-latin-header-font-size;
		line-height: @moon-non-latin-header-text-line-height;
	});
	font-weight: @moon-header-font-weight;
	font-size: @moon-header-font-size;
	font-style: @moon-header-font-style;
	line-height: @moon-header-line-height;
	.font-kerning;
}

.moon-super-header-text() {
	.moon-font(@moon-super-header-font-family, @moon-non-latin-font-family, {font-size: @moon-non-latin-super-header-font-size;});
	font-size: @moon-super-header-font-size;
	.font-kerning;
}

.moon-sub-header-text() {
	.moon-text-base(@moon-sub-header-font-size);

	.moon-locale-non-latin({
		font-size: @moon-non-latin-sub-header-font-size;
	});

	.moon-small-header & {
		font-size: @moon-small-header-sub-header-font-size;

		.moon-locale-non-latin({
			font-size: @moon-non-latin-sub-header-font-size;
		});
	}
}

.moon-header-sub-title-below() {
	.moon-font(@moon-sub-header-below-font-family);
	font-size: @moon-sub-header-below-font-size;
}

.moon-popup-header-text() {
	.moon-font(@moon-popup-header-font-family, @moon-non-latin-font-family-bold, {
		font-weight: @moon-non-latin-font-weight-bold;
		font-size: @moon-non-latin-popup-header-font-size;
	});
	font-weight: @moon-popup-header-font-weight;
	font-style: @moon-popup-header-font-style;
	font-size: @moon-popup-header-font-size;
	line-height: @moon-popup-header-line-height;
	letter-spacing: @moon-popup-header-letter-spacing;
	.font-kerning;
}

.moon-dialog-title() {
	.moon-popup-header-text();
}

.moon-dialog-title-below() {
	.moon-font(@moon-dialog-title-below-font-family, @moon-non-latin-font-family);
	font-weight: @moon-dialog-title-below-font-weight;
	font-size: @moon-popup-sub-header-font-size;
}

.moon-dialog-content() {
	.moon-font();
	font-size: @moon-popup-content-font-size;
	.locale-japanese-line-break();
}

.moon-notification-content() {
	.moon-font(@moon-notification-font-family, @moon-non-latin-font-family-light);
	font-weight: @moon-notification-font-weight;
	font-style: @moon-notification-font-style;
	font-size: @moon-notification-font-size;
	line-height: @moon-body-line-height;
	text-align: initial;
	.moon-word-break();
	.locale-japanese-line-break();
}

.moon-body-text() {
	.moon-font(@moon-body-font-family, @moon-non-latin-font-family-light, {
		font-weight: @moon-non-latin-body-font-weight;
		font-size: @moon-non-latin-body-font-size;
		line-height: @moon-non-latin-body-line-height;
	});
	font-weight: @moon-body-font-weight;
	font-size: @moon-body-font-size;
	// color: @moon-body-text-color;
	line-height: @moon-body-line-height;
	a:link {color: inherit; text-decoration:none;}
	a:visited {color: inherit; text-decoration:none;}
	a:hover {color: inherit; text-decoration:none;}
	a:active {color: inherit; text-decoration:none;}
}

.moon-body-text-spacing() {
	margin: 0 @moon-spotlight-outset @moon-grid-row-height @moon-spotlight-outset;
}

.moon-body-large-text() {
	font-size: @moon-body-font-size + 3;
	line-height: @moon-body-line-height + 9;

	.moon-locale-non-latin({
		font-size: @moon-non-latin-body-font-size + 3;
		line-height: @moon-non-latin-body-line-height + 9;
	});
}

.moon-bold-text() {
	.moon-font(@moon-font-family-bold, @moon-non-latin-font-family-bold, {
		font-weight: @moon-non-latin-font-weight-bold;
	});
	font-weight: bold;
}

.moon-large-button-text() {
	.moon-font(@moon-button-font-family, @moon-non-latin-font-family-bold, {
		font-weight: @moon-non-latin-font-weight-bold;
		font-size: @moon-non-latin-button-large-font-size;
	});
	font-weight: @moon-button-font-weight;
	font-size: @moon-button-large-font-size;
	.font-kerning;
}

.moon-small-button-text() {
	.moon-font(@moon-button-font-family, @moon-non-latin-font-family-bold, {
		font-weight: @moon-non-latin-font-weight-bold;
		font-size: @moon-non-latin-button-small-font-size;
	});
	font-weight: @moon-button-font-weight;
	font-size: @moon-button-small-font-size;
	.font-kerning;
}

.moon-divider-text() {
	.moon-font(@moon-divider-font-family, @moon-non-latin-font-family-bold, {
		font-weight: @moon-non-latin-font-weight-bold;
		font-size: @moon-non-latin-divider-font-size;
		font-style: normal;
	});
	font-size: @moon-divider-font-size;
	font-weight: @moon-divider-font-weight;
	font-style: @moon-divider-font-style;
	letter-spacing: @moon-divider-letter-spacing;
	:global(.enact-locale-non-italic) & {
		font-style: normal;
	}
}

.locale-japanese-line-break() {
	:global(.enact-locale-ja) & {
		line-break: strict;
	}
}
