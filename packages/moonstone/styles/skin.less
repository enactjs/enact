// skin.less
//

.skin(@skinName, @componentName, @componentRules) when (isruleset(@componentRules)) {
	:global(.@{skinName}) .@{componentName},
	// bump the specificity by doubling the skin selector
	:global(.@{skinName}.@{skinName}).@{componentName} {
		@componentRules();
	}
}

.applySkins(@componentRules) when (isruleset(@componentRules)) {
	// Load our base set of color rules
	@import './colors.less';

	:global(.moonstone-dark) {
		@componentRules();
	}

	:global(.moonstone-light) {
		// Override our base set of color rules, locally, with alternates
		@import './colors-light.less';

		@componentRules();
	}
}

.dark() {
	@import './colors.less';
};

.light() {
	.dark();
	@import './colors-light.less';
};

.applySkins(@componentName, @componentRules) when (isruleset(@componentRules)) {
	.skin(
		moonstone,
		@componentName,
		{
			.dark();
			@componentRules();
		}
	);

	.skin(
		moonstone-light,
		@componentName,
		{
			.light();
			@componentRules();
		}
	);
}
