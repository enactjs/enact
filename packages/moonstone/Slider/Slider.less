@import '../styles/colors.less';
@import '../styles/variables.less';

.slider {
	position: relative;
	margin: 0 @moon-spotlight-outset;
	height: 240px;	// Vertical sizing here. Being here instead of in .vertical requires less precedence when overriding the style from app-code.

	&.pressed {
		.fill {
			background-color: @moon-slider-spotlight-bar-color;
		}
		.knob::before {
			background-color: @moon-slider-spotlight-knob-color;
			border-width: 0; // Setting the border-width:0 removes the border and lets the background fill the entire size that was previously cropped off by the border.
		}
	}

	.fill,
	.load {
		height: 100%;
		width: 100%;
		position: absolute;
		pointer-events: none;
		transform-origin: 0 0;
		will-change: transform;
	}

	.fill {
		background-color: @moon-progress-bar-bar-bg-color;
	}

	.load {
		background-color: @moon-progress-bar-bg-color;
	}

	.sliderBar {
		position: relative;
		height: 100%;
		width: 100%;
		background-color: @moon-progress-bg-color;
		direction: ltr;	// Always arrange this according to LTR rules
	}

	.knob {
		position: absolute;
		will-change: transform;

		&::before {
			content: '';
			position: absolute;
			height: @moon-slider-knob-height;
			width: @moon-slider-knob-width;
			// Vertically and horizontally center this knob.
			// Using this method rather than -top -left so the knob is more intuitively customizable.
			-webkit-transform: @moon-translate-center;
			transform:         @moon-translate-center;
			background-color: @moon-slider-knob-bg-color;
			border-radius: (@moon-slider-knob-height / 2);
			border: @moon-button-border-width solid transparent;
			box-sizing: border-box;
			will-change: transform;
			background-clip: padding-box;
		}
	}

	.input {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		margin: 0;
		background-color: transparent;
		box-sizing: border-box;
		-webkit-appearance: none;

		&::-webkit-slider-thumb {
			height: @moon-slider-knob-height;
			width: @moon-slider-knob-width;
			// -webkit-appearance:none;
			border-radius: @moon-slider-knob-width;
			box-sizing: border-box;
			visibility: hidden;
		}

		:global(.enact-locale-right-to-left) & {
			direction: ltr;
		}
	}

	&.horizontal {
		@h-gap: (@moon-slider-knob-width / 2);
		padding: ((@moon-slider-knob-height - @moon-slider-bar-height) / 2) @h-gap;
		height: @moon-slider-bar-height;

		// .sliderBar {}
		.knob {
			top: 50%;
			left: 0;
		}
		.input {
			padding: 0 @h-gap;
		}
	}

	&.vertical {
		@v-gap: (@moon-slider-knob-width / 2);
		padding: @v-gap ((@moon-slider-knob-height - @moon-slider-bar-height) / 2);
		width: @moon-slider-bar-height;
		min-height: 120px;
		display: inline-block;
		vertical-align: top;

		.fill,
		.load {
			bottom: 0;
			transform-origin: 0 100%; // the origin should be the bottom when vertical
		}

		.sliderBar {
			bottom: 0;
		}

		.knob {
			top: 0;
			left: 50%;
		}

		.input {
			transition: transform 1s ease;
			padding: @v-gap 0;

			// Special trickery for true vertical slider in all browsers. uses attribute `orient="vertical"` for FF.
			writing-mode: bt-lr; /* IE */
			-webkit-appearance: slider-vertical; /* WebKit */
			opacity: 0.0001;	// This needs to be still visible to remain interactive, so we can't simply set visibility:hidden or display:none or even -webkit-appearance:none. This becomes effectively invisible with 0.0001
		}
	}

	&:global(.spottable):focus {
		background-color: transparent;

		.knob::before {
			background-color: @moon-slider-spotlight-knob-color;
		}
	}
}

[data-container-muted='true'] {
	.slider {
		&:global(.spottable):focus {
			.knob {
				background-color: @moon-slider-knob-bg-color;
			}
		}
	}
}
