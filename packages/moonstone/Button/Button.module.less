// Button.module.less
//
@import "../styles/mixins.less";
@import "../styles/variables.less";
@import "../styles/skin.less";

// Local scope for some math variables
& {
	@moon-button-pressed-scaled-up: (1 + @moon-button-pressed-scale);
	@moon-button-pressed-scaled-down: (1 / @moon-button-pressed-scaled-up);

	@-webkit-keyframes expand {
		// Old Blink/Webkit doesn't support "@keyframes" so we must use both prefixed and non-prefixed in this section
		60% {
			-webkit-transform: translateZ(0) scale(@moon-button-pressed-scaled-up);
			transform: translateZ(0) scale(@moon-button-pressed-scaled-up);
		}
	}
	@-webkit-keyframes contract {
		60% {
			-webkit-transform: translateZ(0) scale(@moon-button-pressed-scaled-down);
			transform: translateZ(0) scale(@moon-button-pressed-scaled-down);
		}
	}

	@keyframes expand {
		60% { transform: translateZ(0) scale(@moon-button-pressed-scaled-up); }
	}
	@keyframes contract {
		60% { transform: translateZ(0) scale(@moon-button-pressed-scaled-down); }
	}
}

.button {
	.moon-large-button-text();
	height: @moon-button-height;
	line-height: (@moon-button-height - (2 * @moon-button-border-width));
	border-radius: @moon-button-border-radius;
	min-width: @moon-button-height;
	max-width: @moon-button-max-width;
	padding: 0 @moon-button-h-padding;
	margin: 0 @moon-button-h-margin;
	text-align: center;
	vertical-align: middle;
	.moon-taparea(@moon-button-height);

	.moon-custom-text({
		font-size: @moon-button-font-size-large;
		height: @moon-button-height-large;
		min-width: @moon-button-height-large;
		line-height: (@moon-button-height-large - (2 * @moon-button-border-width));
	});

	.bg {
		background-color: inherit;
		border-width: @moon-button-border-width;
		border-style: solid;
		border-radius: @moon-button-border-radius;

		transform: translateZ(0);
		will-change: transform;
		animation-duration: 0.2s;
		animation-iteration-count: 1;
		animation-timing-function: ease-out;
	}

	.client {
		padding: @moon-button-border-width 0;	// We account for the button border-width here, since that is applied to .bg, not .client. Having these match means the text doesn't overlap the border
		border-radius: inherit;
	}

	.icon {
		flex-shrink: 0;
		-webkit-margin-start: @moon-button-icon-margin-start;
		-webkit-margin-end: @moon-button-icon-margin-end;
	}

	&.iconAfter {
		.client {
			flex-direction: row-reverse;
		}

		.icon {
			-webkit-margin-start: @moon-button-icon-position-after-margin-start;
			-webkit-margin-end: @moon-button-icon-position-after-margin-end;
		}
	}

	// Color prop set, and minWidth prop set, update icon's margin to allow more room for the colordot
	&.red,
	&.green,
	&.yellow,
	&.blue {
		// IconButton-like Button scenario
		.client::before {
			// Colored under-bar
			content: "";
			position: absolute;
			bottom: 18px;
			left: 50%;
			width: @moon-button-colordot-width;
			height: @moon-button-colordot-height;
			border-radius: @moon-button-colordot-height;
			transform: translate(-50%, 50%);
		}

		// Standard Button Scenario
		&.minWidth {
			// Update icon's margin to allow more room for the colordot
			.icon {
				-webkit-margin-start: 0;
			}

			.client {
				-webkit-margin-start: @moon-button-colordot-width;
				-webkit-padding-start: @moon-button-icon-h-margin; // The gap between the color-dot and the content matches the space between the regular icon and the text

				&::before {
					// Colored side-bar
					bottom: 50%;
					left: -@moon-button-colordot-width;
					transform: translateY(50%);

					:global(.enact-locale-right-to-left) & {
						left: initial;
						right: -@moon-button-colordot-width;
					}
				}
			}
		}
	}

	//**
	//* The marquee container of the client area. Added by {@link moonstone/MarqueeDecorator}.
	//* @public
	//*/
	.marquee {
		flex-grow: 1;
	}

	// Only center the text if there is no icon. Otherwise, the default is to just leave its
	// alignment alone, since we don't want to try to override marquee's directionality alignment.
	&:not(.hasIcon) {
		.marquee {
			text-align: center;
		}
	}

	&.minWidth {
		min-width: @moon-button-min-width;
	}

	&.small {
		.moon-small-button-text();
		height: @moon-button-small-height;
		min-width: @moon-button-small-height;
		max-width: @moon-button-small-max-width;
		line-height: (@moon-button-small-height - (2 * @moon-button-border-width));
		margin: 0 @moon-button-small-h-margin;
		padding-left: @moon-button-small-h-padding;
		padding-right: @moon-button-small-h-padding;
		margin-left: @moon-button-small-h-margin;
		margin-right: @moon-button-small-h-margin;

		// Standard Button Scenario
		&.minWidth {
			min-width: @moon-button-small-min-width;
		}

		.icon {
			-webkit-margin-start: @moon-button-icon-small-margin-start;
			-webkit-margin-end: @moon-button-icon-small-margin-end;
		}

		&.iconAfter {
			.icon {
				-webkit-margin-start: @moon-button-icon-position-after-small-margin-start;
				-webkit-margin-end: @moon-button-icon-position-after-small-margin-end;
			}
		}

		&.red,
		&.green,
		&.yellow,
		&.blue {
			// IconButton-like Button scenario
			.client::before {
				bottom: 12px;
				width: @moon-button-small-colordot-width;
				height: @moon-button-small-colordot-height;
			}

			// Standard Button Scenario
			&.minWidth {
				.client {
					-webkit-margin-start: @moon-button-small-colordot-width;

					&::before {
						bottom: 50%;
						left: -@moon-button-small-colordot-width;

						:global(.enact-locale-right-to-left) & {
							right: -@moon-button-small-colordot-width;
						}
					}
				}

				.icon {
					-webkit-margin-start: 0;
				}

				&.iconAfter {
					.icon {
						// Override the above rule
						-webkit-margin-start: @moon-button-icon-position-after-small-margin-start;
					}
				}
			}
		}

		.moon-taparea(@moon-button-small-height);

		.moon-custom-text({
			font-size: @moon-button-small-font-size-large;
			height: @moon-button-small-height-large;
			min-width: @moon-button-small-height-large;
			line-height: (@moon-button-small-height-large - (2 * @moon-button-border-width));

			&.minWidth {
				min-width: @moon-button-small-min-width;
			}
		});
	}

	// Large Button followed by another large Button has a custom wider margin between them
	&:not(.small) + &:not(.small) {
		margin-inline-start: (@moon-button-to-button-large-h-margin - @moon-button-h-margin);
	}

	// Button-non-disabled rules
	&:not([disabled]) {
		.focus({
			&.pressed,
			&:active {
				.bg {
					animation-name: expand;
				}
			}
		});
	}

	// Skin colors
	.applySkins({
		&,
		:global(.enact-a11y-high-contrast) & {
			color: @moon-button-text-color;
		}

		.bg {
			background-color: @moon-button-bg-color;
			border-color: transparent;
		}

		&.translucent .bg {
			background-color: @moon-button-translucent-bg-color;
		}

		&.lightTranslucent .bg {
			background-color: @moon-button-lightTranslucent-bg-color;
		}

		&.transparent {
			color: @moon-text-color;

			.bg {
				background-color: @moon-button-transparent-bg-color;
			}
		}

		&.red .client::before {
			background-color: @moon-remote-button-red-color;
		}
		&.green .client::before {
			background-color: @moon-remote-button-green-color;
		}
		&.yellow .client::before {
			background-color: @moon-remote-button-yellow-color;
		}
		&.blue .client::before {
			background-color: @moon-remote-button-blue-color;
		}


		.focus({
			// The complexity below overrides the default high-contrast rules and applies
			// non-high-contrast rules. The precedence for the general rule is too high for the
			// basic button override rule to take effect, so we must overcome it by stacking more
			// classes here.
			&,
			:global(.enact-a11y-high-contrast) &:not(:global(.highContrast)) {
				color: @moon-button-focus-text-color;
				background-color: transparent;
			}

			.bg {
				background-color: @moon-button-focus-bg-color;
			}

			.disabled({
				color: @moon-button-disabled-focus-text-color;

				.client {
					.vendor-opacity(@moon-disabled-opacity);
				}

				.bg {
					background-color: @moon-button-disabled-focus-bg-color;
				}

				.icon {
					color: @moon-button-disabled-focus-icon-color;
				}
			});
		});

		// 'Selected' state
		&.selected {
			color: @moon-button-selected-text-color;

			.bg {
				background-color: @moon-button-selected-bg-color;
				border-color: @moon-button-selected-border-color;
			}

			&.transparent {
				color: @moon-button-text-color;
			}

			// 'Selected+Focus' state, seen in grouped buttons
			.focus({
				color: @moon-button-selected-focus-text-color;

				.bg {
					background-color: @moon-button-selected-focus-bg-color;
					border-color: @moon-button-selected-focus-border-color;
				}
			});
		}
	});
}

.muted({
	.button {
		// Button-non-disabled rules
		&:not([disabled]) {
			.focus({
				&.pressed {
					.bg {
						animation-name: none;
					}
				}
			});
		}

		// Skin colors
		.applySkins({
			.focus({
				background-color: transparent;
				color: @moon-button-text-color;

				.bg {
					background-color: @moon-button-bg-color;
				}

				&.translucent .bg {
					background-color: @moon-button-translucent-bg-color;
				}

				&.lightTranslucent .bg {
					background-color: @moon-button-lightTranslucent-bg-color;
				}

				&.transparent {
					color: @moon-text-color;

					.bg {
						background-color: transparent;
					}
				}
			});

			&.selected {
				// 'Selected+Focus' state, seen in grouped buttons
				.focus({
					.bg {
						border-color: @moon-spotlight-border-color;
					}
				});
			}
		});
	}
});
