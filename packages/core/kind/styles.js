import classnames from 'classnames/bind';

import {addInternalProp} from './util';

/**
 * Merges external and internal CSS classes and style objects. Internal CSS classes can be
 * optionally mapped to alternate names (e.g. those generated by CSS modules) by including a
 * `css` parameter.
 *
 * Example:
 * ```
 *	const stylesConfig = {
 *		css: {
 *			button: 'unambiguous-button-class-name',
 *			client: 'unambiguous-button-class-name-client'
 *		},
 *		className: 'button global-class',
 *		style: {
 *			color: 'red'
 *		}
 *	};
 *
 *	const props = {
 *		className: 'my-button',
 *		style: {
 *			display: 'none'
 *		}
 *	};
 *
 *	styles(stylesConfig, props); // {className: 'unambiguous-button-class-name global-class', styles: {color: 'red', display: 'none'}}
 * ```
 *
 * @method styles
 * @param {Object} cfg Configuration object containing one of `css`, `className`, and/or `style`
 * @param {Object} props Render props
 * @returns {Function} Function accepting props and returning update props with computed properties
 * @public
 */
const styles = (cfg, optProps) => {
	const {className, css, prop = 'className', style} = cfg;

	const renderStyles = (props) => {
		if (style) {
			props.style = Object.assign({}, style, props.style);
		}

		const cn = css ? classnames.bind(css) : classnames;
		const joinedClassName = props[prop] = classnames(
			cn(className),
			props.className
		);

		addInternalProp(props, 'styler', {
			join: cn,
			append: (...args) => cn(joinedClassName, ...args)
		});

		return props;
	};

	if (optProps) {
		return renderStyles(optProps);
	}

	return renderStyles;
};

export default styles;
export {styles};
