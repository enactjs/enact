// Marquee.module.less
//

.marquee {
	// NOTE: Keeping this around for now to validate if we want to use box layout instead of white-space
	// This obscure set of code implements single-line ellipsis-clipped text that doesn't interfere with layout.
	// white-space: nowrap; interferes with may pure-css layouts.
	// overflow: hidden;
	// display: -webkit-box;
	// -webkit-box-orient: block-axis;
	// -webkit-line-clamp: 1;

	--ui-marquee-spacing: 0;
	--ui-marquee-offset: 0;

	width: auto;
	white-space: pre !important;
	overflow: hidden;
	text-align: left;
	/* Force hardware compositing on the container */
	transform: translateZ(0);


	.text {
		pointer-events: none;
		text-overflow: ellipsis;
		overflow: hidden;
		width: 100%;
		margin: 0;
		white-space: pre !important;
		display: inline-block;
		white-space: nowrap;
		vertical-align: top;

		/* Critical: Force GPU acceleration and create own compositing layer */
		transform: translate3d(0, 0, 0);
		backface-visibility: hidden;
		perspective: 1000px;

		/* Optimize text rendering */
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: auto;

		/* Prevent any layout recalculations */
		contain: layout style paint;

		& * {
			margin: 0;
		}

		&.willAnimate {
			will-change: opacity;
			overflow: visible;
			/* Prepare for animation */
			will-change: transform;
			/* Ensure it's on its own layer before animation starts */
			transform: translate3d(0, 0, 0);
		}

		&.animate {
			/* Use CSS custom properties for dynamic values */
			transform: translate3d(var(--ui-marquee-distance, 0), 0, 0);

			/* Linear timing with explicit duration */
			transition-property: transform;
			transition-duration: var(--ui-marquee-duration, 3000ms);
			transition-timing-function: linear;

			/* Keep on GPU */
			will-change: transform;

			/* Additional performance hints */
			backface-visibility: hidden;
		}

		.spacing {
			display: inline-block;
			width: calc(1px * (var(--ui-marquee-spacing, 0) + var(--ui-marquee-offset, 0)));
			vertical-align: top;
			flex-shrink: 0;
			/* Prevent layout shifts */
			contain: size layout style;
		}
	}

	:global(.enact-locale-right-to-left) & {
		text-align: right;
	}
}
