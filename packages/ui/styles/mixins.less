// Disabled elements
.disabled(@rules; @target) when (isruleset(@rules)) and (@target = parent) {
	[disabled] {
		@rules();
	}
}
.disabled(@rules) when (isruleset(@rules)) {
	&[disabled] {
		@rules();
	}
}

.enact-composite() {
	-webkit-transform: translateZ(0);
	-ms-transform: translateZ(0);
	-o-transform: translateZ(0);
	transform: translateZ(0);
	will-change: transform;
}

// Applies RTL-compatible start and end position to a selector
.position-start-end (@start, @end) {
	left: @start;
	right: @end;

	:global(.enact-locale-right-to-left) & {
		left: @end;
		right: @start;
	}
}

// Applies RTL-compatible start and end margins to a selector
.margin-start-end(@start; @end; @target) when (@target = parent) {
    margin-left: @start;
    margin-right: @end;

    :global(.enact-locale-right-to-left)& {
        margin-left: @end;
        margin-right: @start;
    }
}

.margin-start-end (@start, @end) {
	margin-left: @start;
	margin-right: @end;

	:global(.enact-locale-right-to-left) & {
		margin-left: @end;
		margin-right: @start;
	}
}

// Applies RTL-compatible start and end padding to a selector
.padding-start-end(@start; @end; @target) when (@target = parent) {
    padding-left: @start;
    padding-right: @end;

    :global(.enact-locale-right-to-left)& {
        padding-left: @end;
        padding-right: @start;
    }
}

.padding-start-end (@start, @end) {
	padding-left: @start;
	padding-right: @end;

	:global(.enact-locale-right-to-left) & {
		padding-left: @end;
		padding-right: @start;
	}
}

// NOTE: Until we are able to automatically remove these JSDoc-style comments, they should remain LESS-commented
// /**
//  * Removes the margin from the appropriate side of the child components that touch the edges of the
//  * component this is applied to. This respects both LTR and RTL modes.
//  */
.remove-margin-on-edge-children() {
	> :first-child {
		-webkit-margin-start: 0;
	}

	> :last-child {
		-webkit-margin-end: 0;
	}
}

// /**
//  * Removes the padding from the appropriate side of the child components that touch the edges of the
//  * component this is applied to. This respects both LTR and RTL modes.
//  */
.remove-padding-on-edge-children() {
	> :first-child {
		-webkit-padding-start: 0;
	}

	> :last-child {
		-webkit-padding-end: 0;
	}
}


.full-screen-video-player() {
	position: static !important;
	display: block !important;
	margin: 0;
}

.hide-full-screen-ancestor() {
	position: absolute !important;
	overflow: visible !important;
	padding: 0 !important;
	margin: 0 !important;
	width: 100% !important;
	height: 100% !important;
}

.input-placeholder(@rule) {
	&::-webkit-input-placeholder {
		@rule();
	}
	&::-moz-placeholder {
		@rule();
	}
}

// Assign font-kerning rules in a non-proprietary way. Default value being "normal", to enable kerning.
.font-kerning(@val: normal) {
	-webkit-font-kerning: @val;
	font-kerning: @val;
}

// Provide a set of rules to assign to each vendor-prefixed pseudo selector
.vendor-fullscreen(@rule) {
	&:-webkit-full-screen { @rule(); }
	&:-moz-full-screen { @rule(); }
	&:-ms-fullscreen { @rule(); }
	&:-o-full-screen { @rule(); }
	&:fullscreen { @rule(); }
}

.vendor-opacity(@opacity) {
	@opacity-ie: (@opacity * 100);	// Less doesn't like math inside `alpha`
	opacity: @opacity;
	filter: alpha(opacity=@opacity-ie);
}

// Shorthand for positioning code
.position (@t, @r, @b, @l) {
	top: @t;
	right: @r;
	bottom: @b;
	left: @l;
}
.position (@t, @rl, @b) {
	top: @t;
	right: @rl;
	bottom: @b;
	left: @rl;
}
.position (@tb, @rl) {
	top: @tb;
	right: @rl;
	bottom: @tb;
	left: @rl;
}
.position (@trbl) {
	top: @trbl;
	right: @trbl;
	bottom: @trbl;
	left: @trbl;
}

.border-box() {
	box-sizing: border-box;
	-moz-box-sizing: border-box;
}

// Helpful debugging way to understand how LESS variables are being interpreted
.debugLessTypes(@value) {
	:global(.debugLessTypes) {
		value: @value;
		isnumber: isnumber(@value);
		isstring: isstring(@value);
		iscolor: iscolor(@value);
		iskeyword: iskeyword(@value);
		isurl: isurl(@value);
		ispixel: ispixel(@value);
		isem: isem(@value);
		ispercentage: ispercentage(@value);
		isruleset: isruleset(@value);
	}
}

//
// Mixin classes supporting advanced text
//

// /**
//  * Generate a pair of @font-face rules for a given name and "collection" of locale fonts.
//  *
//  * This creates two (2) referenceable font-family names, one that "stacks" onto the provided "base"
//  * name, the other suffixed with the locale name. E.g. "FontName" and "FontName Locale".
//  *
//  * Example:
//  * ```
//  * @fonts: {
//  * 	as: local("LG Smart UI Bengali"); // same as `bn`
//  * 	bn: local("LG Smart UI Bengali");
//  * 	en-JP: local("LG Smart UI JP") "", local("LG Display_JP_Bold") 700; // same as `ja`
//  * 	ja: local("LG Smart UI JP") "", local("LG Display_JP_Bold") 700;
//  * };
//  * ```
//  *
//  * List of supported "options" per locale key, in the following order:
//  * * single font source - Typically a reference to a local() font or a url() font.
//  * * font-weight - Optional, Numbers (100, 500, 700, etc) and keywords (normal, bold, etc) are supported.
//  * 	Empty-string represents "null". This excludes the font-weight rule from the generated code.
//  * * font-style - Optional, Keywords (normal, italic, etc) are supported.
//  * * font-stretch - Optional, Keywords (ultra-condensed, extra-condensed, condensed, semi-condensed, normal, semi-expanded, expanded, extra-expanded, ultra-expanded, initial, inherit) are supported.
//  *
//  * OPTIONALLY: repeat the options above after a comma (,) for multiple weights/styles/options based on the same name.
//  *
//  * @param  {String} @baseName The name used as the basis for the generated font-family.
//  * @param  {Object} @f        Object of keys with values detailing the font variants and options.
//  */

.buildLocaleFont(@fontName; @locale; @args) {
	@f-src: extract(@args, 1);
	@arg2:  if((length(@args) >= 2), extract(@args, 2), normal);  // weight â€“ keyword "normal" added as a fallback here to support args that only include a src (and no weight assignment)
	@arg3:  if((length(@args) >= 3), extract(@args, 3));          // weightRangeEnd (optional) OR style
	@arg4:  if((length(@args) >= 4), extract(@args, 4));          // style OR stretch
	@arg5:  if((length(@args) >= 5), extract(@args, 5));          // stretch

	// Reinterpret the 3rd argument if it's a number, assume it's a range of weights, and update f-style and @f-stretch if a weight range was used.
	// A seemingly simpler `when` block cannot be used here since the scope from inside a `when` doesn't override an outer scope, so nothing you do in one will update the values outside it.
	@f-weight:  if((length(@args) >= 3) and (isnumber(@arg3)), @arg2 @arg3, @arg2);
	@f-style:   if((length(@args) >= 3) and (isnumber(@arg3)), @arg4, @arg3);
	@f-stretch: if((length(@args) >= 3) and (isnumber(@arg3)), @arg5, @arg4);

	// Please retain the following comment for future debugging purposes. This gives insight into how the definition values are being interpreted.
	// :global(.debug-buildLocaleFont@{fontName}-@{locale}) {
	// 	fontName: @fontName;
	// 	locale: @locale;
	// 	args: @args;
	// 	args-count: length(@args);
	// 	arg3-is-number: isnumber(@arg3);
	// 	f-src: @f-src;
	// 	f-weight: @f-weight;
	// 	f-style: @f-style;
	// }

	.buildFontFace("@{fontName} @{locale}"; @f-src; @f-weight; @f-style; @f-stretch);
	.buildFontFace(@fontName;               @f-src; @f-weight; @f-style; @f-stretch);
};

.buildLocaleFonts(@fontName; @f) {
	each(@f, .(@specs, @locale) {
		// Determine if we're working with a collection of font definitions or an individual definition
		@isCollection: if(((length(@specs) > 1) and (length(extract(@specs, 1)) > 1) or (length(extract(@specs, 2)) > 1)), true, false);

		// :global(.debug-buildLocaleFonts-@{locale}) {
		// 	is-collection: @isCollection;
		// }

		// Interpret collections of font definitions: [(set1) (set2) (set3)]
		& when (@isCollection) {
			each(@specs, {
				.buildLocaleFont(@fontName; @locale; @value);
			});
		}
		// Interpret individual font defiintions: (set1)
		& when (not(@isCollection)) {
			.buildLocaleFont(@fontName; @locale; @specs);
		}
		// .debugLessTypes(@specs);

		// Note: The above `when` code will ignore defiintions like the following, because the way
		// LESS works, it can't (at this time) differentiate between a space separated list and a
		// comma separated list, making it impossible to differentiate a single set of font rules
		// with multiple values vs multiple sets with a single value in each.
		//   {
		//     nameRepeat: local("name"), local("name2");
		//   }
		//   Ex: `local("name") 400` vs `local("name"), local("name2")`
		// In this case, only the first value will be used, second, ignored.
	});
};

// /**
//  * Generate a single @font-face rule.
//  *
//  * List of supported "options" per locale key, in the following order:
//  * @param  {String} font-family name   The generated font name, referenceable via
//  *                                     `font-family: <name>;` in normal CSS.
//  * @param  {URL} single font source    Typically a reference to a local() font or a url() font.
//  * @param  {Number|Keyword|""} font-weight  Optional, Numbers (100, 500, 700, etc) and keywords
//  *                                     (normal, bold, etc) are supported. Empty-string represents
//  *                                     "null" or default. This excludes the weight rule from the generated code.
//  * @param  {Keyword} font-style        Optional, Keywords (normal, italic, etc) are supported.
//  * @param  {Keyword} font-stretch      Optional, Keywords (ultra-condensed, extra-condensed, condensed, semi-condensed, normal, semi-expanded, expanded, extra-expanded, ultra-expanded, initial, inherit) are supported.
//  */
.buildFontFace(@name; @src; @weight: normal; @style: ""; @stretch: "") {
	@font-face {
		font-family: @name;
		src: @src;

		// Conditionally add the following
		// `length()` below refers to specifying font-weight ranges: `600 900`.
		& when ((iskeyword(@weight)) or (isnumber(@weight)) or (length(@weight) > 1)) {
			font-weight: @weight;
		}
		& when (iskeyword(@style)) {
			font-style: @style;
		}
		& when (iskeyword(@stretch)) {
			font-stretch: @stretch;
		}
	}
}

.locale-japanese-line-break() {
	:global(.enact-locale-ja) & {
		line-break: strict;
	}
}
