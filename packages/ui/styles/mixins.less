// Disabled elements
.disabled(@rules; @target) when (isruleset(@rules)) and (@target = parent) {
	[disabled] {
		@rules();
	}
}
.disabled(@rules) when (isruleset(@rules)) {
	&[disabled] {
		@rules();
	}
}

.enact-composite() {
	-webkit-transform: translateZ(0);
	-ms-transform: translateZ(0);
	-o-transform: translateZ(0);
	transform: translateZ(0);
	will-change: transform;
}

// Applies RTL-compatible start and end position to a selector
.position-start-end (@start, @end) {
	left: @start;
	right: @end;

	:global(.enact-locale-right-to-left) & {
		left: @end;
		right: @start;
	}
}

// Applies RTL-compatible start and end margins to a selector
.margin-start-end(@start; @end; @target) when (@target = parent) {
    margin-left: @start;
    margin-right: @end;

    :global(.enact-locale-right-to-left)& {
        margin-left: @end;
        margin-right: @start;
    }
}

.margin-start-end (@start, @end) {
	margin-left: @start;
	margin-right: @end;

	:global(.enact-locale-right-to-left) & {
		margin-left: @end;
		margin-right: @start;
	}
}

// Applies RTL-compatible start and end padding to a selector
.padding-start-end(@start; @end; @target) when (@target = parent) {
    padding-left: @start;
    padding-right: @end;

    :global(.enact-locale-right-to-left)& {
        padding-left: @end;
        padding-right: @start;
    }
}

.padding-start-end (@start, @end) {
	padding-left: @start;
	padding-right: @end;

	:global(.enact-locale-right-to-left) & {
		padding-left: @end;
		padding-right: @start;
	}
}

// NOTE: Until we are able to automatically remove these JSDoc-style comments, they should remain LESS-commented
// /**
//  * Removes the margin from the appropriate side of the child components that touch the edges of the
//  * component this is applied to. This respects both LTR and RTL modes.
//  */
.remove-margin-on-edge-children() {
	> :first-child {
		-webkit-margin-start: 0;
	}

	> :last-child {
		-webkit-margin-end: 0;
	}
}

// /**
//  * Removes the padding from the appropriate side of the child components that touch the edges of the
//  * component this is applied to. This respects both LTR and RTL modes.
//  */
.remove-padding-on-edge-children() {
	> :first-child {
		-webkit-padding-start: 0;
	}

	> :last-child {
		-webkit-padding-end: 0;
	}
}


.full-screen-video-player() {
	position: static !important;
	display: block !important;
	margin: 0;
}

.hide-full-screen-ancestor() {
	position: absolute !important;
	overflow: visible !important;
	padding: 0 !important;
	margin: 0 !important;
	width: 100% !important;
	height: 100% !important;
}

.input-placeholder(@rule) {
	&::-webkit-input-placeholder {
		@rule();
	}
	&::-moz-placeholder {
		@rule();
	}
}

// Asign font-kerning rules in a non-proprietary way. Default value being "normal", to enable kerning.
.font-kerning(@val: normal) {
	-webkit-font-kerning: @val;
	font-kerning: @val;
}

// Provide a set of rules to assign to each vendor-prefixed pseudo selector
.vendor-fullscreen(@rule) {
	&:-webkit-full-screen { @rule(); }
	&:-moz-full-screen { @rule(); }
	&:-ms-fullscreen { @rule(); }
	&:-o-full-screen { @rule(); }
	&:fullscreen { @rule(); }
}

.vendor-opacity(@opacity) {
	@opacity-ie: (@opacity * 100);	// Less doesn't like math inside `alpha`
	opacity: @opacity;
	filter: alpha(opacity=@opacity-ie);
}

// Shorthand for positioning code
.position (@t, @r, @b, @l) {
	top: @t;
	right: @r;
	bottom: @b;
	left: @l;
}
.position (@t, @rl, @b) {
	top: @t;
	right: @rl;
	bottom: @b;
	left: @rl;
}
.position (@tb, @rl) {
	top: @tb;
	right: @rl;
	bottom: @tb;
	left: @rl;
}
.position (@trbl) {
	top: @trbl;
	right: @trbl;
	bottom: @trbl;
	left: @trbl;
}

.border-box() {
	box-sizing: border-box;
	-moz-box-sizing: border-box;
}

//
// Mixin classes supporting advanced text
//

.locale-japanese-line-break() {
	:global(.enact-locale-ja) & {
		line-break: strict;
	}
}
